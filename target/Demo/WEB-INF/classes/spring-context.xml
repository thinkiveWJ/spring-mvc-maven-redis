<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
       default-lazy-init="true">

    <!--<description>Spring Configuration</description>-->

    <!--&lt;!&ndash; 开启注解处理器 &ndash;&gt;-->
    <!--<context:annotation-config/>-->

    <!--&lt;!&ndash; 开启组件自动扫描；使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  &ndash;&gt;-->
    <!--<context:component-scan base-package="beacool.service">&lt;!&ndash; base-package 如果多个，用“,”分隔 &ndash;&gt;-->
        <!--<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
        <!--&lt;!&ndash;<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>&ndash;&gt;-->
    <!--</context:component-scan>-->


    <!--&lt;!&ndash;引入属性文件 &ndash;&gt;-->
    <!--<context:property-placeholder location="classpath:dbconfig.properties,classpath:redis.properties" />-->

    <!--&lt;!&ndash; dataSource 配置数据源 &ndash;&gt;-->
    <!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">-->

        <!--&lt;!&ndash; 基本属性 url、User、password &ndash;&gt;-->
        <!--<property name="url" value="${jdbc.url}" />-->
        <!--<property name="username" value="${jdbc.username}" />-->
        <!--<property name="password" value="${jdbc.password}" />-->

        <!--&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;-->
        <!--<property name="initialSize" value="1" />-->
        <!--<property name="minIdle" value="1" />-->
        <!--<property name="maxActive" value="20" />-->

        <!--&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
        <!--<property name="maxWait" value="60000" />-->

        <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="60000" />-->

        <!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="300000" />-->

        <!--<property name="validationQuery" value="SELECT 'x'" />-->
        <!--<property name="testWhileIdle" value="true" />-->
        <!--<property name="testOnBorrow" value="false" />-->
        <!--<property name="testOnReturn" value="false" />-->

        <!--&lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;-->
        <!--<property name="poolPreparedStatements" value="false" />-->
        <!--<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />-->

        <!--&lt;!&ndash; 配置监控统计拦截的filters &ndash;&gt;-->
        <!--<property name="filters" value="stat" />-->
    <!--</bean>-->

    <!--&lt;!&ndash; spring和MyBatis完美整合，不需要mybatis的配置映射文件 &ndash;&gt;-->
    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
        <!--&lt;!&ndash; 自动扫描mapping.xml文件 &ndash;&gt;-->
        <!--<property name="mapperLocations" value="classpath:beacool/mapper/*.xml"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; DAO接口所在包名，Spring会自动查找其下的类 &ndash;&gt;-->
    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
        <!--<property name="basePackage" value="beacool.dao"/>-->
        <!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 对dataSource 数据源进行事务管理 &ndash;&gt;-->
    <!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <!--<property name="dataSource" ref="dataSource"></property>-->
    <!--</bean>-->


    <!--&lt;!&ndash; 配置redis 单机版 &ndash;&gt;-->
    <!--&lt;!&ndash; redis数据源 &ndash;&gt;-->
    <!--<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
        <!--&lt;!&ndash; 最大空闲数 &ndash;&gt;-->
        <!--<property name="maxIdle" value="${redis.maxIdle}" />-->
        <!--&lt;!&ndash; 最大活跃数 &ndash;&gt;-->
        <!--<property name="maxTotal" value="${redis.maxActive}" />-->
        <!--&lt;!&ndash; 最大等待时间 &ndash;&gt;-->
        <!--<property name="maxWaitMillis" value="${redis.maxWait}" />-->
        <!--&lt;!&ndash; 返回连接时，检测连接是否成功 &ndash;&gt;-->
        <!--<property name="testOnBorrow" value="${redis.testOnBorrow}" />-->
    <!--</bean>-->
    <!--&lt;!&ndash; Spring-redis连接池管理工厂 &ndash;&gt;-->
    <!--<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
        <!--&lt;!&ndash; IP地址 &ndash;&gt;-->
        <!--<property name="hostName" value="${redis.host}" />-->
        <!--&lt;!&ndash; 密码 &ndash;&gt;-->
        <!--<property name="password" value="${redis.password}" />-->
        <!--&lt;!&ndash; 端口号 &ndash;&gt;-->
        <!--<property name="port" value="${redis.port}" />-->
        <!--&lt;!&ndash; 超时时间 &ndash;&gt;-->
        <!--<property name="timeout" value="${redis.database}" />-->
        <!--<property name="poolConfig" ref="poolConfig" />-->
    <!--</bean>-->

    <!--&lt;!&ndash; redis模板类，提供了对缓存的增删改查 &ndash;&gt;-->
    <!--<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">-->
        <!--<property name="connectionFactory" ref="jedisConnectionFactory" />-->
        <!--<property name="keySerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
        <!--</property>-->
        <!--<property name="valueSerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />-->
        <!--</property>-->
    <!--</bean>-->
    <!--&lt;!&ndash; StrRedisTemplate &ndash;&gt;-->
    <!--<bean id="strRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">-->
        <!--<property name="connectionFactory" ref="jedisConnectionFactory" />-->
        <!--<property name="keySerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
        <!--</property>-->
        <!--<property name="valueSerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
        <!--</property>-->
        <!--<property name="hashKeySerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
        <!--</property>-->
    <!--</bean>-->
    <!--&lt;!&ndash; 使用中间类解决RedisCache.jedisConnectionFactory的静态注入，从而使MyBatis实现第三方缓存 &ndash;&gt;-->
    <!--&lt;!&ndash;<bean id="redisCacheTransfer" class="sysone.zr.com.utils.RedisCacheTransfer">&ndash;&gt;-->
        <!--&lt;!&ndash;<property name="jedisConnectionFactory" ref="jedisConnectionFactory"/>&ndash;&gt;-->
    <!--&lt;!&ndash;</bean>&ndash;&gt;-->
    <!--&lt;!&ndash; Redis缓存管理对象 &ndash;&gt;-->
    <!--<bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">-->
        <!--<constructor-arg index="0" ref="redisTemplate" />-->
    <!--</bean>-->

    <!--&lt;!&ndash; 事务管理 通知 &ndash;&gt;-->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
        <!--<tx:attributes>-->
            <!--&lt;!&ndash; 对insert,create,update,modify,delete,remove 开头的方法进行事务管理,只要有异常就回滚 &ndash;&gt;-->
            <!--<tx:method name="insert*" propagation="REQUIRED"   read-only="false"/>-->
            <!--<tx:method name="add*" propagation="REQUIRED"   read-only="false"/>-->
            <!--<tx:method name="create*" propagation="REQUIRED"   read-only="false"/>-->
            <!--<tx:method name="update*" propagation="REQUIRED"   read-only="false"/>-->
            <!--<tx:method name="modify*" propagation="REQUIRED"   read-only="false"/>-->
            <!--<tx:method name="delete*" propagation="REQUIRED"   read-only="false"/>-->
            <!--<tx:method name="remove*" propagation="REQUIRED"  read-only="false"/>-->
            <!--&lt;!&ndash; find,get,select,count开头的方法,开启只读,提高数据库访问性能 &ndash;&gt;-->
            <!--<tx:method name="find*" read-only="true" />-->
            <!--<tx:method name="query*" read-only="true" />-->
            <!--<tx:method name="get*" read-only="true" />-->
            <!--<tx:method name="select*" read-only="true" />-->
            <!--<tx:method name="count*" read-only="true" />-->
            <!--&lt;!&ndash; 其它的所有方法支持事务设置的属性（异常回滚） &ndash;&gt;-->
            <!--<tx:method name="*" rollback-for="java.lang.Throwing" />-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!--&lt;!&ndash; 事务 aop 配置 &ndash;&gt;-->
    <!--<aop:config>-->
        <!--&lt;!&ndash;其中第一个*代表返回值，第二*代表service下子包，第三个*代表方法名，“（..）”代表方法参数。&ndash;&gt;-->
        <!--<aop:pointcut id="serviceMethods" expression="execution(* beacool.service.*.*(..))" />-->
        <!--<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods" />-->
    <!--</aop:config>-->

    <!--&lt;!&ndash; 配置使Spring采用CGLIB代理 &ndash;&gt;&lt;!&ndash; 开启基于@AspectJ切面的注解处理器 &ndash;&gt;-->
    <!--<aop:aspectj-autoproxy proxy-target-class="true" />-->


    <!--&lt;!&ndash; 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  &ndash;&gt;-->
    <!--<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>-->
</beans>